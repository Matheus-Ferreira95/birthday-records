package com.matheusf.birthday.resources;

import java.net.URI;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.matheusf.birthday.domain.People;
import com.matheusf.birthday.domain.User;
import com.matheusf.birthday.dto.PeopleDTO;
import com.matheusf.birthday.dto.UserDTO;
import com.matheusf.birthday.services.PeopleService;
import com.matheusf.birthday.services.UserService;

@RestController
@RequestMapping("/users")
public class UserController {

	@Autowired
	private UserService userService;	
		
	@Autowired
	private PeopleService peopleService;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@PostMapping
	public ResponseEntity<UserDTO> register(@Valid @RequestBody User user) {		
		user = userService.register(user);		
		UserDTO userDTO = toDTO(user);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(userDTO.getId()).toUri();
		return ResponseEntity.created(uri).body(userDTO);		
	}
	
	@GetMapping
	public ResponseEntity<Void> canBeLogin(
			@RequestParam(value = "login", defaultValue = "matheus@gmail.com") String login,
			@RequestParam(value = "password", defaultValue = "123456789") String password) {
		userService.tryLogin(login, password);
		return ResponseEntity.noContent().build();
	}
	
	@GetMapping("/{idUser}")
	public ResponseEntity<Page<PeopleDTO>> findAll(@PathVariable Long idUser) {		
		User user = userService.findById(idUser);
		Page<PeopleDTO> pageDTO = filter(user.getPeoples());				
		return ResponseEntity.ok().body(pageDTO);		
	}	
	
	@GetMapping("/{idUser}/{nomePeople}")
	public ResponseEntity<Page<PeopleDTO>> findByName(@PathVariable Long idUser, @PathVariable String nomePeople) {
		User user = userService.findById(idUser);
		List<People> list = user.getPeoples().stream()
				.filter(pessoa -> pessoa.getName().toLowerCase().contains(nomePeople.toLowerCase()))
				.collect(Collectors.toList());				
		Page<PeopleDTO> pageDTO = filter(list);			
		return ResponseEntity.ok().body(pageDTO);		
	}	
	
	@GetMapping("/{idUser}/onDay")
	public ResponseEntity<Page<PeopleDTO>> listBirthdaysOnDay(@PathVariable Long idUser) {
		User user = userService.findById(idUser);
		List<People> birthdaysOnDay = peopleService.findBirthdaysOnDay(user);
		Page<PeopleDTO> pageDTO = filter(birthdaysOnDay);		
		return ResponseEntity.ok().body(pageDTO);	
	}
	
	@GetMapping("/{idUser}/onMonth")
	public ResponseEntity<Page<PeopleDTO>> listBirthdaysOnMonth(@PathVariable Long idUser) {
		User user = userService.findById(idUser);
		List<People> birthdaysOnMonth = peopleService.findBirthdaysOnMonth(user);
		Page<PeopleDTO> pageDTO = filter(birthdaysOnMonth);		
		return ResponseEntity.ok().body(pageDTO);	
	}	
	
	private Page<PeopleDTO> filter(List<People> peoples){
		List<PeopleDTO> list = peoples.stream()
				.filter(people -> people.getHasDeleted() == false)
				.map(people -> new PeopleDTO(people))
				.sorted(Comparator.comparing(PeopleDTO::getNome))
				.collect(Collectors.toList());
		
		Page<PeopleDTO> pageDTO = new PageImpl<>(list);
		return pageDTO;
	}	
	
	private UserDTO toDTO(User user) {
		return modelMapper.map(user, UserDTO.class);
	}	
}