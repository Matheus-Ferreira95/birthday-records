package com.matheusf.birthday.resources;

import java.net.URI;

import javax.validation.Valid;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.matheusf.birthday.domain.User;
import com.matheusf.birthday.dto.PeopleDTO;
import com.matheusf.birthday.dto.UserDTO;
import com.matheusf.birthday.services.PeopleService;
import com.matheusf.birthday.services.UserService;

@RestController
@RequestMapping("/users")
public class UserController {

	@Autowired
	private UserService userService;	
	
	@Autowired
	private PeopleService peopleService;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@PostMapping
	public ResponseEntity<UserDTO> register(@Valid @RequestBody User user) {		
		user = userService.register(user);		
		UserDTO userDTO = toDTO(user);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(userDTO.getId()).toUri();
		return ResponseEntity.created(uri).body(userDTO);		
	}
	
	@PutMapping
	public ResponseEntity<Void> canBeLogin(@Valid @RequestBody User user) {
		userService.canBeLogin(user);
		return ResponseEntity.noContent().build();
	}
	
	@GetMapping
	public ResponseEntity<Page<PeopleDTO>> findAll(
			@RequestParam(value="idUser", defaultValue = "1") Long idUser,
			@RequestParam(value="page", defaultValue = "0") Integer page,
			@RequestParam(value="linesPerPage", defaultValue = "10") Integer linesPerPage,
			@RequestParam(value="orderBy", defaultValue = "nome") String orderBy,
			@RequestParam(value="direction", defaultValue = "ASC") String direction) {
		
		User user = userService.findById(idUser);		
		Page<PeopleDTO> records = peopleService.findAll(user, page, linesPerPage, orderBy, direction);
		return ResponseEntity.ok().body(records);		
	}
	
	
	private UserDTO toDTO(User user) {
		return modelMapper.map(user, UserDTO.class);
	}	
}
